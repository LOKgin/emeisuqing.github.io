<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-11T11:39:41+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SuQing’s Page</title><subtitle>欢迎来到苏轻的个人领域！</subtitle><author><name>true</name></author><entry><title type="html">随笔</title><link href="http://localhost:4000/2019/03/06/%E9%9A%8F%E7%AC%94.html" rel="alternate" type="text/html" title="随笔" /><published>2019-03-06T00:00:00+08:00</published><updated>2019-03-06T00:00:00+08:00</updated><id>http://localhost:4000/2019/03/06/%E9%9A%8F%E7%AC%94</id><content type="html" xml:base="http://localhost:4000/2019/03/06/%E9%9A%8F%E7%AC%94.html">&lt;p&gt;小时候，笑就是快乐，没有其他。&lt;/p&gt;

&lt;p&gt;现在，笑只是一种表情，再也没有纯粹的开心。&lt;/p&gt;</content><author><name>true</name></author><summary type="html"></summary></entry><entry><title type="html">JavaScript 笔记</title><link href="http://localhost:4000/2019/03/04/JS%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="JavaScript 笔记" /><published>2019-03-04T17:06:29+08:00</published><updated>2019-03-04T17:06:29+08:00</updated><id>http://localhost:4000/2019/03/04/JS%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/2019/03/04/JS%E7%AC%94%E8%AE%B0.html">&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;
 &lt;strong&gt;|&lt;/strong&gt; &lt;a href=&quot;#类&quot;&gt;类&lt;/a&gt;
 &lt;strong&gt;|&lt;/strong&gt; &lt;a href=&quot;#闭包&quot;&gt;闭包&lt;/a&gt;
 &lt;strong&gt;|&lt;/strong&gt; &lt;a href=&quot;#JSON&quot;&gt;JSON&lt;/a&gt;
 &lt;strong&gt;|&lt;/strong&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;资料&lt;/strong&gt;
 &lt;strong&gt;|&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript&quot;&gt;MDN Web Docs - JavaScript&lt;/a&gt;
 &lt;strong&gt;|&lt;/strong&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;类&quot;&gt;类&lt;/h3&gt;

&lt;p&gt;　　使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; 关键字声明一个类。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　使用一个类表达式来定义一个类。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// 一个匿名的类&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 一个命名的类&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　构造函数 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; 方法用于创建和初始化一个由 class 创建的对象，一个类有且只能有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;　　一个构造函数可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; 关键字来调用一个父类的构造函数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;static 关键字&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hypot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 所有参数的平方和的平方根&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// p1 p2 两点之间的距离&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; 关键字用来定义一个类的一个静态方法。调用静态方法不需要实例化该类，静态方法通常用于创建工具函数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;extends 关键字&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; makes noise.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; barks.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;code class=&quot;highlighter-rouge&quot;&gt;extends&lt;/code&gt; 关键字在类声明或类表达式中用于创建一个类作为另一个类的一个子类。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;super 关键字&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　如果子类中存在构造函数，则需要在使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 之前首先调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;闭包&quot;&gt;闭包&lt;/h3&gt;

&lt;p&gt;　　先来看一段代码。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　在 JavaScript 中，嵌套的函数可以访问在其外部声明的变量，并且，JavaScript 中的函数会形成闭包。&lt;/p&gt;

&lt;p&gt;　　再来看一段代码。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　闭包是由函数以及创建该函数的词法环境组合而成，这个环境包含了这个闭包创建时&lt;strong&gt;所能访问的所有局部变量&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;　　所以，&lt;code class=&quot;highlighter-rouge&quot;&gt;showName()&lt;/code&gt; 返回的匿名函数，永远可以访问它的词法作用域中的变量，即可以访问到 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;　　下面再来一段更加有意思的。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeSizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeSizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =function(){fontSize = &quot;12px&quot;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeSizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;size32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;code class=&quot;highlighter-rouge&quot;&gt;size12&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;size32&lt;/code&gt; 都是闭包。它们共享相同的函数定义，但是保存了不同的词法环境。而这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;makeSizer()&lt;/code&gt; 则更像一个函数的制造工厂，可以制造设定 fontSize 的函数，这就是闭包的实用价值。&lt;/p&gt;

&lt;p&gt;　　然而还远不止于此，再看。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; 对象内部的 &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; 变量只能通过三个公共函数访问，相同的词法环境被这三个函数所共享。&lt;/p&gt;

&lt;p&gt;　　私有方法不仅仅有利于限制对代码的访问，还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。虽然 JavaScript 没有这种原生支持，但我们可以使用闭包来模拟私有方法。&lt;/p&gt;

&lt;p&gt;　　以这种方式使用闭包，提供了许多与面向对象编程相关的好处，特别是数据隐藏和封装。但如果不是某些特定任务需要使用闭包，在函数中创建函数是不明智的，因为&lt;strong&gt;闭包在处理速度和内存消耗方面对脚本性能具有负面影响&lt;/strong&gt;，这点一定要记住。&lt;/p&gt;

&lt;h3 id=&quot;json&quot;&gt;JSON&lt;/h3&gt;

&lt;p&gt;　　JSON 的全称为 JavaScript Object Notation，意为 JS 对象表示法。JSON 和 JavaScript 的对象格式一致，但是属性名都加了双引号。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;name&quot;:&quot;sq&quot;,&quot;age&quot;:&quot;18&quot;}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// JSON 格式的对象&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[1,2,3,true,&quot;hello world&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// JSON 格式的数组&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;在 JSON 中可以使用
    &lt;ul&gt;
      &lt;li&gt;字符串&lt;/li&gt;
      &lt;li&gt;数值&lt;/li&gt;
      &lt;li&gt;布尔值&lt;/li&gt;
      &lt;li&gt;null&lt;/li&gt;
      &lt;li&gt;对象&lt;/li&gt;
      &lt;li&gt;数组&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　JSON 格式的字符串可以被任意的语言识别，然后转换为任意语言的对象。不同的语言之间在进行数据交互时，通常使用 JSON。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// JSON 对象的两个方法&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;name&quot;:&quot;sq&quot;,&quot;age&quot;:&quot;18&quot;}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// JSON 字符串 -&amp;gt; JS 对象&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// JS 对象 -&amp;gt; JSON 字符串&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　JSON 这个对象在 IE7 及以下的浏览器中不支持，如果一定要求兼容的话可以引入外部的 JavaScript 文件。&lt;/p&gt;

&lt;h3 id=&quot;end&quot;&gt;END&lt;/h3&gt;</content><author><name>true</name></author><category term="JavaScript" /><summary type="html">目录 | 类 | 闭包 | JSON |</summary></entry><entry><title type="html">了解 Web 前端的工作内容</title><link href="http://localhost:4000/2019/02/27/Web%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B7%A5%E4%BD%9C.html" rel="alternate" type="text/html" title="了解 Web 前端的工作内容" /><published>2019-02-27T17:50:48+08:00</published><updated>2019-02-27T17:50:48+08:00</updated><id>http://localhost:4000/2019/02/27/Web%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B7%A5%E4%BD%9C</id><content type="html" xml:base="http://localhost:4000/2019/02/27/Web%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B7%A5%E4%BD%9C.html">&lt;h3 id=&quot;基础内容&quot;&gt;基础内容&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HTML&lt;/li&gt;
  &lt;li&gt;CSS&lt;/li&gt;
  &lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;进阶内容&quot;&gt;进阶内容&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ajax&lt;/li&gt;
  &lt;li&gt;DOM&lt;/li&gt;
  &lt;li&gt;Http（协议与安全）&lt;/li&gt;
  &lt;li&gt;SVG&lt;/li&gt;
  &lt;li&gt;SPA（单页 Web 应用）&lt;/li&gt;
  &lt;li&gt;Canvas&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;javascript-进阶内容&quot;&gt;JavaScript 进阶内容&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;常见的 JS 类库
    &lt;ul&gt;
      &lt;li&gt;jQuery（★★★必须熟练）&lt;/li&gt;
      &lt;li&gt;其他类库
        &lt;ul&gt;
          &lt;li&gt;MooTools / Prototype / D3 数据可视化 / ★ Echarts 商业级数据图表 / ExtJS&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;常见的 JS 框架
    &lt;ul&gt;
      &lt;li&gt;Bootstrap（★）&lt;/li&gt;
      &lt;li&gt;Vue（★）
        &lt;ul&gt;
          &lt;li&gt;Vue 技术栈
            &lt;ul&gt;
              &lt;li&gt;VueX / VueRouter / VueResoucre / Vue-Cli / Mpvue / Axios / eslint 等&lt;/li&gt;
              &lt;li&gt;webpack → Vue + Element UI&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;其他框架（Angular / React）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;浏览器&quot;&gt;浏览器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;浏览器的工作原理&lt;/li&gt;
  &lt;li&gt;浏览器的兼容性&lt;/li&gt;
  &lt;li&gt;跨浏览器开发（移动平台 Android &amp;amp; iOS 的浏览器特性）&lt;/li&gt;
  &lt;li&gt;利用 jQuery Mobile 构建移动端的 WebApp&lt;/li&gt;
  &lt;li&gt;调试工具（Web 前端的性能优化）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Web 图像 → 动态效果&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web 动画 → 实现原理 / 常用特效 / 动画插件&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;页面架构、盒模型、DIV + CSS 布局&lt;/li&gt;
      &lt;li&gt;Flex 布局 / 响应式布局 → 屏幕自适应 / 流式布局&lt;/li&gt;
      &lt;li&gt;CSS3 动画&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;轻应用
    &lt;ul&gt;
      &lt;li&gt;微信小程序 / 支付宝小程序 / 钉钉微应用&lt;/li&gt;
      &lt;li&gt;Mpvue / Wepy 等框架的开发&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RESTful 架构&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;编程
    &lt;ul&gt;
      &lt;li&gt;模块化编程思想 / 面向对象编程 / MVC 模式&lt;/li&gt;
      &lt;li&gt;编程风格 → 事件驱动 / 数据驱动&lt;/li&gt;
      &lt;li&gt;前端编程规范 → git flow。&lt;/li&gt;
      &lt;li&gt;Web标准 → HTML5 / CSS3 / ECMAScript 6 / W3C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;后台
    &lt;ul&gt;
      &lt;li&gt;数据库 → 交互 / 解析 → API 调用
        &lt;ul&gt;
          &lt;li&gt;MySQL 数据库 / nosql (MongoDB) → 索引优化 / 数据库架构设计&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;语言
        &lt;ul&gt;
          &lt;li&gt;★ Node.js → express / koa&lt;/li&gt;
          &lt;li&gt;Python / PHP / .NET&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;全球化 / 本地化的敏捷开发流程&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;其他工具&quot;&gt;其他工具&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;常用平面工具
    &lt;ul&gt;
      &lt;li&gt;PS&lt;/li&gt;
      &lt;li&gt;AI&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;项目代码管理工具
    &lt;ul&gt;
      &lt;li&gt;Git&lt;/li&gt;
      &lt;li&gt;SVN&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;前端构建工具
    &lt;ul&gt;
      &lt;li&gt;webpack&lt;/li&gt;
      &lt;li&gt;parcel（★★★）&lt;/li&gt;
      &lt;li&gt;gulp（基于 Node.js 的插件工具）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>true</name></author><category term="Eassy" /><summary type="html">基础内容</summary></entry><entry><title type="html">JavaScript 复制内容到剪贴板</title><link href="http://localhost:4000/2019/01/21/JS%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF.html" rel="alternate" type="text/html" title="JavaScript 复制内容到剪贴板" /><published>2019-01-21T23:20:46+08:00</published><updated>2019-01-21T23:20:46+08:00</updated><id>http://localhost:4000/2019/01/21/JS%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF</id><content type="html" xml:base="http://localhost:4000/2019/01/21/JS%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF.html">&lt;ul&gt;
  &lt;li&gt;直接上代码&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;copyText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'textarea'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Copy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 不显示&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'已经复制到剪贴板！'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Copy successfully.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在各种兼容问题比较复杂的情况下，上面的代码创建了一个不可见的 &lt;code class=&quot;highlighter-rouge&quot;&gt;textarea&lt;/code&gt; 用来复制内容，此方法可以兼容多种浏览器与系统，即粗暴又方便。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;document.execCommand(&quot;Copy&quot;)&lt;/code&gt; 函数针对于 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;textarea&lt;/code&gt; 这两种标签，先 &lt;code class=&quot;highlighter-rouge&quot;&gt;select()&lt;/code&gt; 选中，然后就可以 &lt;code class=&quot;highlighter-rouge&quot;&gt;Copy&lt;/code&gt; 其中的内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果需要被复制的内容中没有换行，那么使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 代替 &lt;code class=&quot;highlighter-rouge&quot;&gt;textarea&lt;/code&gt; 其实也可以。而推荐使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;textarea&lt;/code&gt; 的原因就是因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;textarea&lt;/code&gt; 会保留换行。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>true</name></author><category term="JavaScript" /><summary type="html">直接上代码</summary></entry><entry><title type="html">jQuery 笔记</title><link href="http://localhost:4000/2018/12/27/jQuery.html" rel="alternate" type="text/html" title="jQuery 笔记" /><published>2018-12-27T11:05:20+08:00</published><updated>2018-12-27T11:05:20+08:00</updated><id>http://localhost:4000/2018/12/27/jQuery</id><content type="html" xml:base="http://localhost:4000/2018/12/27/jQuery.html">&lt;h3 id=&quot;jquery-简介&quot;&gt;jQuery 简介&lt;/h3&gt;

&lt;p&gt;　　jQuery 是一个 JavaScript 函数库。使用 jQuery 之前，我们需要在 HTML 中使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签来引用它。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　官网地址：&lt;a href=&quot;http://jquery.com/&quot;&gt;jquery.com&lt;/a&gt;&lt;br /&gt;
　　推荐引用：&lt;a href=&quot;https://www.bootcdn.cn/jquery/&quot;&gt;bootcdn.cn&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 文档就绪事件处理器&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 为了防止文档在完全加载之前运行代码&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 通常将代码置于此处&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jquery-语法&quot;&gt;jQuery 语法&lt;/h3&gt;

&lt;p&gt;　　&lt;code class=&quot;highlighter-rouge&quot;&gt;$(xxx).action();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;　　jQuery 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 符号作为语句的开头，但是在某些其他 JavaScript 库中的函数同样使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 符号。jQuery 使用名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;noConflict()&lt;/code&gt; 的方法来解决该问题。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;noConflict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 使用 sq 代替 $ 符号&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// e.g.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　如果你的 jQuery 代码块使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 简写，并且不愿意改变这个快捷方式，那么可以把 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 符号作为变量传递给 &lt;code class=&quot;highlighter-rouge&quot;&gt;ready()&lt;/code&gt; 方法。这样就可以在函数内使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 符号了，而在函数外，依旧不得不使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;noConflict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jquery-选择器&quot;&gt;jQuery 选择器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;jQuery 元素选择器
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;p&quot;)&lt;/code&gt; 选取所有的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;p.classname&quot;)&lt;/code&gt; 选取所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;class = &quot;classname&quot;&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;p#idname&quot;)&lt;/code&gt; 选取所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;id = &quot;idname&quot;&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jQuery 属性选择器
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;[href]&quot;)&lt;/code&gt; 选取所有有 &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt; 属性的元素&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;[href='#']&quot;)&lt;/code&gt; 选取所有有 &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt; 属性且值等于 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 的元素&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;[href!='#']&quot;)&lt;/code&gt; 选取所有有 &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt; 属性且值不等于 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 的元素&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;[href$='.jpg']&quot;)&lt;/code&gt; 选取所有有 &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt; 属性且值以 &lt;code class=&quot;highlighter-rouge&quot;&gt;.jpg&lt;/code&gt; 结尾的元素&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jQuery CSS 选择器
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;red&quot;);&lt;/code&gt; 改变属性的 CSS 样式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;更多例子
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(this)&lt;/code&gt; 当前元素&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;ul li:first&quot;)&lt;/code&gt; 每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 的第一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;div#intro .head&quot;)&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;id = &quot;intro&quot;&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素中的所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;class = &quot;head&quot;&lt;/code&gt; 的元素&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jquery-事件&quot;&gt;jQuery 事件&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(document).ready(function)&lt;/code&gt; 将函数绑定到文档的就绪事件（当文档完成加载时）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(selector).click(function)&lt;/code&gt; 触发或将函数绑定到被选元素的点击事件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(selector).dblclick(function)&lt;/code&gt;  触发或将函数绑定到被选元素的双击事件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(selector).focus(function)&lt;/code&gt; 触发或将函数绑定到被选元素的获得焦点事件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(selector).mouseover(function)&lt;/code&gt; 触发或将函数绑定到被选元素的鼠标悬停事件&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jquery-动画效果&quot;&gt;jQuery 动画效果&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;显示 / 隐藏
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hide(speed, callback)&lt;/code&gt; 隐藏&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show(speed, callback)&lt;/code&gt; 显示
        &lt;ul&gt;
          &lt;li&gt;speed 参数设置的是速度，可以取的值有 slow/fast/1000（数值代表毫秒）&lt;/li&gt;
          &lt;li&gt;callback 函数在当前动画 100% 完成之后执行，如有必要请不要忘记&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toggle(speed, callback)&lt;/code&gt; 显示被隐藏的元素 / 隐藏被显示的元素，相当于切换上面的两种方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;渐变
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fadeIn(speed, callback)&lt;/code&gt; 淡入&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fadeOut(speed, callback)&lt;/code&gt; 淡出&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fadeToggle(speed, callback)&lt;/code&gt; 切换淡入/淡出&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fadeTo(speed, opacity, callback)&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;opacity 参数将元素渐变为指定的不透明度 (0~1)&lt;/li&gt;
          &lt;li&gt;例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;#div&quot;).fadeTo(&quot;slow&quot;, 0.15);&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;滑动
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slideDown(speed, callback)&lt;/code&gt; 向下滑动&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slideUp(speed, callback)&lt;/code&gt; 向上滑动&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slideToggle(speed, callback)&lt;/code&gt; 切换向下 / 上滑动&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;自定义动画
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animate({params}, speed, callback)&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;params 参数设置形成动画的 CSS 属性，可以一次操作多个属性&lt;/li&gt;
          &lt;li&gt;对位置进行操作前，要先把元素的 CSS position 属性设置为 relative/fixed/absolute&lt;/li&gt;
          &lt;li&gt;必须使用 Camel 标记法书写所有的属性名，例如使用 paddingLeft 而不是 padding-left 等&lt;/li&gt;
          &lt;li&gt;色彩动画并不包含在核心 jQuery 库中，可以下载 Color Animations 插件&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'250px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 改变属性的值&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'+=150px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 相对的值&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'toggle'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 预定义的值&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'100px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;slow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// animate() 默认支持队列功能&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'3em'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;slow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stop(stopAll, goToEnd)&lt;/code&gt; 停止动画
    &lt;ul&gt;
      &lt;li&gt;stopAll 参数设置是否清除动画队列。默认 false（仅停止活动的动画，允许执行队列中的动画）&lt;/li&gt;
      &lt;li&gt;goToEnd 参数设置是否立即完成当前动画。默认 false&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;方法链接(Chaining)
    &lt;ul&gt;
      &lt;li&gt;在相同的元素上，运行多条 jQuery 命令&lt;/li&gt;
      &lt;li&gt;例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000);&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;jQuery 在语法上不是很严格，当链接过多影响阅读代码时，可以折行和缩进&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jquery-获取--修改元素&quot;&gt;jQuery 获取 / 修改元素&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text()&lt;/code&gt; 设置或返回所选元素的文本内容&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;html()&lt;/code&gt; 设置或返回所选元素的内容（包括 HTML 标记）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;val()&lt;/code&gt; 设置或返回表单字段的值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attr()&lt;/code&gt; 设置或返回元素某个属性的值
    &lt;ul&gt;
      &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;attr()&lt;/code&gt; 一次设置多个属性&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;href&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://suqing.fun/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;suqing&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text()&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;html()&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;val()&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;attr()&lt;/code&gt; 的回调函数
    &lt;ul&gt;
      &lt;li&gt;回调函数由两个参数：被选元素列表中当前元素的下标，以及原始值&lt;/li&gt;
      &lt;li&gt;以函数新值返回希望使用的字符串&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;origText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;origText:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;origText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, index:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jquery-添加元素&quot;&gt;jQuery 添加元素&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;append(&quot;xxxx&quot;)&lt;/code&gt; 在被选元素的结尾插入内容&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prepend(&quot;xxx&quot;)&lt;/code&gt; 在被选元素的开头插入内容&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;after(&quot;xxxxx&quot;)&lt;/code&gt; 在被选元素外部后插入内容&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;before(&quot;xxxx&quot;)&lt;/code&gt; 在被选元素外部前插入内容&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jquery-删除元素&quot;&gt;jQuery 删除元素&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;remove()&lt;/code&gt; 删除被选元素以及所有子元素
    &lt;ul&gt;
      &lt;li&gt;也可以接受参数，对被删元素进行过滤。&lt;/li&gt;
      &lt;li&gt;例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;p&quot;).remove(&quot;.test&quot;);&lt;/code&gt;，删除 &lt;code class=&quot;highlighter-rouge&quot;&gt;class = &quot;test&quot;&lt;/code&gt; 的所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;empty()&lt;/code&gt; 删除被选元素的所有子元素&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jquery-设置-css&quot;&gt;jQuery 设置 CSS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addClass()&lt;/code&gt; 添加 class 属性&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;removeClass()&lt;/code&gt; 删除 class 属性&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toggleClass()&lt;/code&gt; 切换 class 属性&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;css()&lt;/code&gt; 设置或返回样式属性&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;background-color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 返回属性的值&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;background-color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yellow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 设置属性的值&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 设置多个属性的值&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;background-color&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yellow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;font-size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;200%&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jquery-尺寸&quot;&gt;jQuery 尺寸&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;width()&lt;/code&gt; 宽度（不包括内边距、边框或外边距）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;height()&lt;/code&gt; 高度（不包括内边距、边框或外边距&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innerWidth()&lt;/code&gt; 宽度（包括内边距）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innerHeight()&lt;/code&gt; 高度（包括内边距）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;outerWidth()&lt;/code&gt; 宽度（包括内边距和边框）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;outerHeight()&lt;/code&gt; 高度（包括内边距和边框）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;outerWidth(true)&lt;/code&gt; 宽度（包括内边距、边框和外边距）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;outerHeight(true)&lt;/code&gt; 高度（包括内边距、边框和外边距）
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(document).width()&lt;/code&gt; 文档宽度&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(window).height()&lt;/code&gt; 窗口高度&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jquery-遍历&quot;&gt;jQuery 遍历&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parent()&lt;/code&gt; 返回被选元素的直接父元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parents()&lt;/code&gt; 返回被选元素的所有祖先元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parentsUntil()&lt;/code&gt; 返回介于两个给定元素之间的所有祖先元素
    &lt;ul&gt;
      &lt;li&gt;例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;span&quot;).parentsUntil(&quot;div&quot;);&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;children()&lt;/code&gt; 返回被选元素的所有直接子元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 返回被选元素的后代元素
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;div&quot;).find(&quot;span&quot;);&lt;/code&gt;，返回属于 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 后代的所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 元素&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;div&quot;).find(&quot;*&quot;);&lt;/code&gt;，返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 的所有后代&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;siblings()&lt;/code&gt; 返回被选元素的所有同胞元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; 返回被选元素的下一个同胞元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nextAll()&lt;/code&gt; 返回被选元素后面的所有同胞元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nextUntil()&lt;/code&gt; 返回后面的介于两个给定参数之间的所有同胞元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prev()&lt;/code&gt; 返回被选元素的前一个同胞元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prevAll()&lt;/code&gt; 返回被选元素前面的所有同胞元素&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prevUntil()&lt;/code&gt; 返回前面的介于两个给定参数之间的所有同胞元素&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;first()&lt;/code&gt; 返回被选元素的首个元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;last()&lt;/code&gt; 返回被选元素的最后一个元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eq()&lt;/code&gt; 返回被选元素中指定索引的元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt; 返回匹配标准的所有元素&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;not()&lt;/code&gt; 返回不匹配标准的所有元素&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;div p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 首个 &amp;lt;div&amp;gt; 元素内部的第一个 &amp;lt;p&amp;gt; 元素&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;div p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 最后一个 &amp;lt;div&amp;gt; 元素中的最后一个 &amp;lt;p&amp;gt; 元素&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 返回第二个 &amp;lt;p&amp;gt; 元素&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 带有 class = &quot;test&quot; 的所有 &amp;lt;p&amp;gt; 元素&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 没有 class = &quot;test&quot; 的所有 &amp;lt;p&amp;gt; 元素&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jquery-ajax异步&quot;&gt;jQuery AJAX（异步）&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;load(url, data, callback)&lt;/code&gt; 从服务器加载数据，并把返回的数据放入被选元素中
    &lt;ul&gt;
      &lt;li&gt;callback 回调函数的参数：
        &lt;ul&gt;
          &lt;li&gt;responseTxt 包含调用成功时的结果内容&lt;/li&gt;
          &lt;li&gt;statusTXT 包含调用的状态&lt;/li&gt;
          &lt;li&gt;xhr 包含 XMLHttpRequest 对象&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseTxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;statusTxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusTxt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusTxt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Error: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.get(url, callback)&lt;/code&gt; 通过 HTTP GET 请求从服务器上请求数据&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Data: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Status: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.post(url, data, callback)&lt;/code&gt; POST 请求&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Donald Duck&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Duckburg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;// code&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@end&lt;/p&gt;

&lt;h3 id=&quot;苏轻使用-jquery-的一些心得笔记&quot;&gt;苏轻使用 jQuery 的一些心得笔记&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;为了获取一个元素的文本时，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.html()&lt;/code&gt; 方法默认会转义一些特殊字符（例如：&amp;amp;）。这种情况下，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.text()&lt;/code&gt; 来获取文本内容就不会自动转义了。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>true</name></author><category term="JavaScript" /><category term="jQuery" /><summary type="html">jQuery 简介</summary></entry><entry><title type="html">Java 随手笔记</title><link href="http://localhost:4000/2018/12/10/Java%E9%9A%8F%E6%89%8B%E8%AE%B0.html" rel="alternate" type="text/html" title="Java 随手笔记" /><published>2018-12-10T17:54:33+08:00</published><updated>2018-12-10T17:54:33+08:00</updated><id>http://localhost:4000/2018/12/10/Java%E9%9A%8F%E6%89%8B%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/2018/12/10/Java%E9%9A%8F%E6%89%8B%E8%AE%B0.html">&lt;h1 id=&quot;java-笔记&quot;&gt;Java 笔记&lt;/h1&gt;

&lt;h5 id=&quot;目录&quot;&gt;目录&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#final&quot;&gt;final&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#抽象方法和抽象类&quot;&gt;抽象方法和抽象类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#接口&quot;&gt;接口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#内部类&quot;&gt;内部类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;final&quot;&gt;final&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;修饰的变量
    &lt;ul&gt;
      &lt;li&gt;该变量一旦赋值，就不可改变。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;修饰的方法
    &lt;ul&gt;
      &lt;li&gt;该方法不可被子类重写，但是可以被重载！&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;修饰类
    &lt;ul&gt;
      &lt;li&gt;该类不能被继承，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;等。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;抽象方法和抽象类&quot;&gt;抽象方法和抽象类&lt;/h3&gt;

&lt;p&gt;　　使用 abstract 修饰的方法和类被称为抽象方法和抽象类。只有抽象类中才会有抽象方法，抽象方法只有声明，没有方法体。抽象类的子类必须重写父类的抽象方法，给抽象方法提供具体的实现。通过抽象类中抽象方法必须实现的限制，我们就可以得到相似的子类，子类之间必定具有共通点。
&lt;br /&gt;
　　虽然抽象类可以包含属性、方法、构造方法，但是抽象类不能实例化，只能被继承。&lt;/p&gt;

&lt;h3 id=&quot;接口&quot;&gt;接口&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;接口的简单介绍&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　接口就是比抽象类还“抽象”的“抽象类”，更加规范地对子类进行了约束，全面实现了规范和具体实现的分离。抽象类中某些类还是提供了具体实现的，而接口则是不提供任何的实现，接口中的所有方法都是抽象方法。接口完全面向规范，规定了一批类具有的公共方法规范。&lt;/p&gt;

&lt;p&gt;　　从接口的实现者角度看，接口定义了可以向外部提供的服务。从接口的调用者角度看，接口定义了实现者可以提供的服务。接口是两个模块之间通信的标准和规范，只要把所要设计的模块之间的接口定义好，就相当于完成了系统的设计大纲，剩下的就是实现了。我们通常使用“面向接口”的思想来设计一些系统。&lt;/p&gt;

&lt;p&gt;　　接口和实现类之间不是父子关系，是实现规则的关系。接口就是规范，定义的是一组规则，体现了“若是……则必须……”的思想。接口的本质像契约一样，制定好之后必须遵守。&lt;/p&gt;

&lt;p&gt;　　面向对象的精髓，是对对象的抽象，而最能体现这一点的就是接口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;接口的定义
    &lt;ul&gt;
      &lt;li&gt;访问修饰符只能是public或者默认&lt;/li&gt;
      &lt;li&gt;接口名和类名的命名机制相同&lt;/li&gt;
      &lt;li&gt;接口可以多继承，子接口扩展父接口将会获得父接口所定义的一切&lt;/li&gt;
      &lt;li&gt;接口中的属性只能是常量，不管写不写都是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;public static final&lt;/code&gt;修饰&lt;/li&gt;
      &lt;li&gt;接口中的方法，不管写不写都是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;public abstract&lt;/code&gt;修饰&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;访问修饰符&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;接口名&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;父接口&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;父接口&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;常量定义&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;方法定义&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// for example&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Father&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is just a test!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Father&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;接口的使用
    &lt;ul&gt;
      &lt;li&gt;子类通过&lt;code class=&quot;highlighter-rouge&quot;&gt;implements&lt;/code&gt;来实现接口中的规范&lt;/li&gt;
      &lt;li&gt;接口不能创建实例，但是可以用于声明引用变量类型&lt;/li&gt;
      &lt;li&gt;一个类实现了接口，就必须实现接口中的所有方法，并且这些方法只能使用&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;修饰&lt;/li&gt;
      &lt;li&gt;接口中只能包含静态常量、静态方法、抽象方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;面向接口编程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　面向接口编程是面向对象编程的一部分，软件设计中最难处理的就是需求的复杂变化，而需求的复杂变化更多体现在具体的实现上。面向接口编程需要我们把握住真正核心的东西，制定的接口规范必须是项目中最稳定不变的部分，有时候设计比实现要更加困难。&lt;/p&gt;

&lt;p&gt;　　接口本身的语法很简单，如何学会灵活的使用才是重点。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;内部类&quot;&gt;内部类&lt;/h3&gt;

&lt;p&gt;　　通常情况下，我们把每个类定义成独立的单元，而有时我们把一个类放在另一个类的内部定义，这种类就称为内部类（&lt;em&gt;innerclasses&lt;/em&gt;）。内部类可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;修饰，而外部类只能使用&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;修饰。&lt;/p&gt;

&lt;p&gt;　　内部类只是一个编译时的概念，一旦编译成功每个类会生成各自的&lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;字节码文件，它们是相互独立的关系。但是内部类只能让它的外部类直接访问，不允许同一个包中的其他类直接访问。内部类可以直接访问外部类的私有属性，内部类被当成外部类的成员，但是外部类不能访问内部类的内部属性。&lt;/p&gt;</content><author><name>true</name></author><category term="Java" /><summary type="html">Java 笔记</summary></entry><entry><title type="html">Java 中面向对象的三大特性</title><link href="http://localhost:4000/2018/12/05/Java%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81.html" rel="alternate" type="text/html" title="Java 中面向对象的三大特性" /><published>2018-12-05T15:00:56+08:00</published><updated>2018-12-05T15:00:56+08:00</updated><id>http://localhost:4000/2018/12/05/Java%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81</id><content type="html" xml:base="http://localhost:4000/2018/12/05/Java%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81.html">&lt;h3 id=&quot;封装&quot;&gt;封装&lt;/h3&gt;
&lt;p&gt;　　封装的实现，得益于访问控制符的使用。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;private
    &lt;ul&gt;
      &lt;li&gt;表示私有，只有自己能访问&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;default
    &lt;ul&gt;
      &lt;li&gt;当没有修饰符修饰时，只有同一个包中的类能访问&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;protected
    &lt;ul&gt;
      &lt;li&gt;表示可以被同一个包的类以及其他包中的子类访问&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;public
    &lt;ul&gt;
      &lt;li&gt;表示可以被该项目的所有包中的所有类访问&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　类的属性一般使用&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;访问权限，然后提供属性相应的&lt;code class=&quot;highlighter-rouge&quot;&gt;get/set&lt;/code&gt;方法来对相关属性赋值与读取。而这些&lt;code class=&quot;highlighter-rouge&quot;&gt;get/set&lt;/code&gt;方法则使用public修饰，以便于外界调用。&lt;/p&gt;

&lt;p&gt;　　通常情况下，只用于本类的辅助性方法用&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;修饰，希望其他类调用的方法用&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;修饰。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;值得注意的是 boolean 变量的 get 方法需要使用 is 开头！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;继承&quot;&gt;继承&lt;/h3&gt;

&lt;p&gt;　　Java 中的类只有单继承（接口有多继承），在定义一个类的时候可以使用关键字 extends 指定它的父类。子类继承父类，就可以得到父类（除了构造方法）的全部属性和方法，但仍然不可以直接访问父类的私有属性和方法。&lt;/p&gt;

&lt;p&gt;　　如果定义一个类时没有使用 extends，那么它的父类是：&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Object&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;方法的重写override&quot;&gt;方法的重写（override）&lt;/h4&gt;

&lt;p&gt;　　子类可以重写父类的方法，在调用这个方法时，子类重写后的方法会直接替换掉父类对应的方法。但是方法的重写必须遵循几个原则：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;方法名、形参列表必须相同&lt;/li&gt;
  &lt;li&gt;返回值类型和声明异常类型，子类必须小于等于父类&lt;/li&gt;
  &lt;li&gt;访问权限，子类必须大于等于父类&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;下面苏轻就介绍两个经常会去重写的方法！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;equals-方法&quot;&gt;equals 方法&lt;/h6&gt;

&lt;p&gt;　　苏轻经常使用&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;来判断两个数是否相等，这在处理基本类型的数据时很实用。但是在遇到引用类型时，情况有所变化。&lt;/p&gt;

&lt;p&gt;　　如果&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;的两边是引用类型（对象，比如两个字符串），&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;会去判断它们的地址是否相同。也就是说这时即使它们（这两个字符串）的内容可能完全相同，只要它们不是指向同一个地址，它们就不相等。于是，在所有类的基类&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;类中，定义有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;equals()&lt;/code&gt;的方法，为我们提供了定义“对象内容相等”的逻辑。&lt;/p&gt;

&lt;p&gt;　　&lt;code class=&quot;highlighter-rouge&quot;&gt;JDK&lt;/code&gt;提供的一些类，如&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;类、&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;类、包装类等，都已经重写了&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;类的&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;方法。调用这些类的&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;方法，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;x.equals(y)&lt;/code&gt;，当&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;所引用的对象是同一类对象且属性内容相等（可以不是同一个对象）时返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，否则返回&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;。&lt;/p&gt;

&lt;h6 id=&quot;tostring-方法&quot;&gt;toString 方法&lt;/h6&gt;

&lt;p&gt;　　在&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;类中还定义有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;方法，在打印或用字符串连接对象时，就会自动调用该对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;方法。所以我们就可以去重写这个方法，来自定义输出某些对象的内容。&lt;/p&gt;

&lt;h4 id=&quot;关键字-super&quot;&gt;关键字 super&lt;/h4&gt;

&lt;p&gt;　　关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt;是直接父类对象的引用，在子类中可以随时通过&lt;code class=&quot;highlighter-rouge&quot;&gt;super.xxxx&lt;/code&gt;的方式来访问父类中被子类覆盖的方法或属性。&lt;/p&gt;

&lt;p&gt;　　子类的构造方法中如果有&lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt;，那么必须位于第一句。如果子类构造方法的第一行代码没有显式地调用&lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;this()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt;仍然会默认调用&lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt;，这里的含义是调用父类的无参数构造方法。因此，构造方法里的&lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt;是可以省略的。&lt;/p&gt;

&lt;h3 id=&quot;多态&quot;&gt;多态&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;导致多态的存在的3个必要条件：
    &lt;ul&gt;
      &lt;li&gt;继承&lt;/li&gt;
      &lt;li&gt;方法的重写&lt;/li&gt;
      &lt;li&gt;父类引用指向子类对象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　首先必须明确一点：多态是方法的多态，与属性无关。当父类引用调用子类重写的方法时，多态就出现了。&lt;/p&gt;

&lt;p&gt;　　当某方法的形参是一个父类的引用时，此方法实际使用时的实参可以是该父类任意的子类对象，可以通过不同的子类对象实现不同的行为方式。&lt;/p&gt;

&lt;p&gt;　　多态的主要优势是提高了代码的可扩展性，符合开闭原则。但是多态也有弊端，就是无法调用子类独有的方法。&lt;/p&gt;</content><author><name>true</name></author><category term="Java" /><summary type="html">封装 　　封装的实现，得益于访问控制符的使用。 private 表示私有，只有自己能访问 default 当没有修饰符修饰时，只有同一个包中的类能访问 protected 表示可以被同一个包的类以及其他包中的子类访问 public 表示可以被该项目的所有包中的所有类访问</summary></entry><entry><title type="html">Java 关键字</title><link href="http://localhost:4000/2018/12/03/Java%E5%85%B3%E9%94%AE%E5%AD%97.html" rel="alternate" type="text/html" title="Java 关键字" /><published>2018-12-03T13:31:52+08:00</published><updated>2018-12-03T13:31:52+08:00</updated><id>http://localhost:4000/2018/12/03/Java%E5%85%B3%E9%94%AE%E5%AD%97</id><content type="html" xml:base="http://localhost:4000/2018/12/03/Java%E5%85%B3%E9%94%AE%E5%AD%97.html">&lt;ul&gt;
  &lt;li&gt;this&lt;/li&gt;
  &lt;li&gt;static&lt;/li&gt;
  &lt;li&gt;package&lt;/li&gt;
  &lt;li&gt;import&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;this&quot;&gt;this&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;this 的本质是创建完毕的某个对象的地址&lt;/li&gt;
  &lt;li&gt;普通方法中，this 指向调用该方法的对象&lt;/li&gt;
  &lt;li&gt;构造方法中，this 指向正要初始化的对象&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;this()&lt;/code&gt;可以调用重载的构造方法，只能在构造方法的第一句使用&lt;/li&gt;
  &lt;li&gt;this 不能用于 static 方法中&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;static&quot;&gt;static&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;静态成员变量
    &lt;ul&gt;
      &lt;li&gt;用 static 声明的成员变量为静态成员变量（类变量）&lt;/li&gt;
      &lt;li&gt;静态成员变量属于类，且只有一份，被该类的所有对象共享，在类被载入时被显式初始化&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;静态方法
    &lt;ul&gt;
      &lt;li&gt;用 static 声明的方法为静态方法&lt;/li&gt;
      &lt;li&gt;静态方法属于类，且在静态方法中不可直接访问非静态的成员&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;静态初始化块
    &lt;ul&gt;
      &lt;li&gt;用 static 标识的代码块为静态初始化块&lt;/li&gt;
      &lt;li&gt;静态初始化块，用于类的初始化操作，不可直接访问非静态的成员&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;package&quot;&gt;package&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;通过 package 实现对类的管理&lt;/li&gt;
  &lt;li&gt;通常是类的第一句非注释性语句。&lt;/li&gt;
  &lt;li&gt;包的命名
    &lt;ul&gt;
      &lt;li&gt;域名倒着写，再加上模块名，便于内部管理类。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;com.a&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;com.a.b&lt;/code&gt;，是两个完全独立的包&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;常用&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;java.lang&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java语言的核心类，提供常用功能，String、Math、Integer、System、Thread 等。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;java.awt&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;包含了构成抽象窗口工具集（&lt;em&gt;Abstract Window Toolkits&lt;/em&gt;）的多个类，这些类被用来构建和管理应用程序的图形用户界面（GUI）。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;java.net&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;与网络相关操作的类&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;java.io&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;多种输入/输出功能的类&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;java.util&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;实用工具类，如定义系统特性、使用与日期日历相关的函数。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;import&quot;&gt;import&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如果要使用其他包的类，需要使用 import 导入，从而可以在本类中直接通过类名来调用，否则就需要书写类的完整包名和类名。import 的使用便于编写代码，提高可维护性。&lt;/li&gt;
  &lt;li&gt;Java会默认导入&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang&lt;/code&gt;包下所有的类&lt;/li&gt;
  &lt;li&gt;如果导入了两个同名的类，只能用包名+类名来显式调用相关类&lt;/li&gt;
  &lt;li&gt;静态导入
    &lt;ul&gt;
      &lt;li&gt;例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;import static java.lang.Math.*;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;导入指定类的静态属性&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>true</name></author><category term="Java" /><summary type="html">this static package import</summary></entry><entry><title type="html">Java 中的运算符</title><link href="http://localhost:4000/2018/12/02/Java%E8%BF%90%E7%AE%97%E7%AC%A6.html" rel="alternate" type="text/html" title="Java 中的运算符" /><published>2018-12-02T15:17:41+08:00</published><updated>2018-12-02T15:17:41+08:00</updated><id>http://localhost:4000/2018/12/02/Java%E8%BF%90%E7%AE%97%E7%AC%A6</id><content type="html" xml:base="http://localhost:4000/2018/12/02/Java%E8%BF%90%E7%AE%97%E7%AC%A6.html">&lt;h3 id=&quot;算术运算符&quot;&gt;算术运算符&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;二元运算符（+、-、*、/、%）
    &lt;ul&gt;
      &lt;li&gt;二元运算符是指需要两个操作数才能完成运算的运算符。&lt;/li&gt;
      &lt;li&gt;“%”是取模运算符，也即是常说的“取余数”。&lt;/li&gt;
      &lt;li&gt;整数运算
        &lt;ul&gt;
          &lt;li&gt;如果两个操作数至少有一个为long类型，则结果为long类型。&lt;/li&gt;
          &lt;li&gt;只要两个操作数没有long类型，结果就为int类型，即使操作数中有short或byte类型。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;浮点数运算
        &lt;ul&gt;
          &lt;li&gt;如果两个操作数至少有一个为double类型，则结果为double类型。&lt;/li&gt;
          &lt;li&gt;只有两个操作数都是float类型，结果才是float类型。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;取模运算
        &lt;ul&gt;
          &lt;li&gt;取模运算的操作数可以为浮点数，但是一般都使用整数。&lt;/li&gt;
          &lt;li&gt;结果“余数”的符号和左边的操作数相同。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一元运算符（++、–）
    &lt;ul&gt;
      &lt;li&gt;自增、自减，原操作数加一或减一。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// a=1&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 先赋值，在自增 b=a=1 a=a+1=2&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 先自增，在赋值 a=a+1=3 c=a=3&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// d=-1&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// e=1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;赋值运算符&quot;&gt;赋值运算符&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;赋值运算符就是等号。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;赋值的扩展运算符如下表所示：&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;运算符&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;用法&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;等效&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;+=&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a += b;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a = a + b;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-=&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a -= b;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a = a - b;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;*=&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a *= b;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a = a * b;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;/=&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a /= b;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a = a / b;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;%=&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a %= b;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a = a % b;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a=a+b=3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a=a*b=6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;关系运算符&quot;&gt;关系运算符&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;==、!=、&amp;gt;、&amp;lt;、&amp;gt;=、&amp;lt;=&lt;/li&gt;
  &lt;li&gt;关系运算符用来进行比较运算，结果是布尔值（true/false）。&lt;/li&gt;
  &lt;li&gt;==和!=，所有数据类型都可以使用。&lt;/li&gt;
  &lt;li&gt;&amp;gt;、&amp;lt;、&amp;gt;=、&amp;lt;=只有数值类型（byte/short/int/long/float/double，还有char）可以使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;逻辑运算符&quot;&gt;逻辑运算符&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在Java中，逻辑运算的操作数和运算结果都是boolean类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;符号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;结果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;逻辑与&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;如果两个操作数都是true，那么结果为true，否则为false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;逻辑或&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;|&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;两个操作数只要有一个是true，结果就为true，否则为false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;短路与&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;只要有一个为false，就直接返回false结束运算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;短路或&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;||&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;只要有一个为true，就直接返回true结束运算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;逻辑非&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;!&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;取反&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;逻辑异或&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;相同为false，不同为true&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;短路的方式：从左向右计算，如果左边的操作数就已经可以确定该逻辑表达式的值，那么就不会计算右边的操作数，追求高效率。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a = %d, b = %d\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 因为 a == b 为 false，所以 f = false，短路后右边不计算&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;f = %b\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a = %d, b = %d\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 因为 ++a 先计算，所以 a = 2&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 发生短路的时候，不会再计算右边部分，某些计算导致的值的改变就不会发生&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;t = %b\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a = %d, b = %d\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;位运算符&quot;&gt;位运算符&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;位运算符&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;~&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;取反&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;按位与&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;|&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;按位或&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;按位异或&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;«&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;左移运算符，二进制左移相当于乘2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;»&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;右移运算符，二进制右移一位以为相当于除2取商&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;“&amp;amp;”和“|”既是逻辑运算符，也是位运算符。如果两侧的操作数都是boolean类型，就作为逻辑运算符使用。如果两侧的操作数都是整数类型，就作为位运算符使用。&lt;/li&gt;
  &lt;li&gt;不要把“^”当做幂运算，它是“按位异或”操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;字符串连接符&quot;&gt;字符串连接符（+）&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;“+”运算符两侧的操作数只要有一个是字符串（String）类型，系统就会自动将另一个操作数转换为字符串然后进行连接。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;条件运算符&quot;&gt;条件运算符&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;格式：&lt;code class=&quot;highlighter-rouge&quot;&gt;T ? A : B&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;T为boolean类型的表达式，先计算T的值。&lt;/li&gt;
      &lt;li&gt;若T为true，运算结果为表达式A的值，否则为表达式B的值。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;运算符的优先级问题&quot;&gt;运算符的优先级问题&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;优先级&lt;/td&gt;
      &lt;td&gt;运算符&lt;/td&gt;
      &lt;td&gt;类&lt;/td&gt;
      &lt;td&gt;结合性&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;()&lt;/td&gt;
      &lt;td&gt;括号运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;!、+（正）、-（负）&lt;/td&gt;
      &lt;td&gt;一元运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;~&lt;/td&gt;
      &lt;td&gt;位逻辑运算符&lt;/td&gt;
      &lt;td&gt;由右至左&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;++、–&lt;/td&gt;
      &lt;td&gt;递增与递减运算符&lt;/td&gt;
      &lt;td&gt;由右至左&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;*、/、%&lt;/td&gt;
      &lt;td&gt;算术运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;+、-&lt;/td&gt;
      &lt;td&gt;算术运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;«、»&lt;/td&gt;
      &lt;td&gt;位左移、右移运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;&amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;=&lt;/td&gt;
      &lt;td&gt;关系运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;==、!=&lt;/td&gt;
      &lt;td&gt;关系运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;&amp;amp;&lt;/td&gt;
      &lt;td&gt;位运算符、逻辑运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;位运算符、逻辑运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;|&lt;/td&gt;
      &lt;td&gt;位运算符、逻辑运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td&gt;逻辑运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;||&lt;/td&gt;
      &lt;td&gt;逻辑运算符&lt;/td&gt;
      &lt;td&gt;由左至右&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;? :&lt;/td&gt;
      &lt;td&gt;条件运算符&lt;/td&gt;
      &lt;td&gt;由右至左&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;=、+=、-=、*=、/=、%=&lt;/td&gt;
      &lt;td&gt;赋值运算符、扩展运算符&lt;/td&gt;
      &lt;td&gt;由右至左&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;　　我现在要举一个例子：&lt;code class=&quot;highlighter-rouge&quot;&gt;A || B &amp;amp;&amp;amp; C&lt;/code&gt;，看第一眼的时候谁能很清晰地反应过来优先级？它等价于&lt;code class=&quot;highlighter-rouge&quot;&gt;A || (B &amp;amp;&amp;amp; C)&lt;/code&gt;，而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;(A || B) &amp;amp;&amp;amp; C&lt;/code&gt;！&lt;/p&gt;

  &lt;p&gt;　　脑容量不够用的苏轻觉得根本没必要记这么多优先级！既然小括号是最高的优先级，那写表达式的时候就全部用小括号括起来吧！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;instanceof-运算符&quot;&gt;instanceof 运算符&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;instanceof 是二元运算符，左边是对象，右边是类。&lt;/li&gt;
  &lt;li&gt;若左边的对象是右面的类（或右边的类的子类）所创建的对象时，返回 true，否则返回 false。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>true</name></author><category term="Java" /><summary type="html">算术运算符 二元运算符（+、-、*、/、%） 二元运算符是指需要两个操作数才能完成运算的运算符。 “%”是取模运算符，也即是常说的“取余数”。 整数运算 如果两个操作数至少有一个为long类型，则结果为long类型。 只要两个操作数没有long类型，结果就为int类型，即使操作数中有short或byte类型。 浮点数运算 如果两个操作数至少有一个为double类型，则结果为double类型。 只有两个操作数都是float类型，结果才是float类型。 取模运算 取模运算的操作数可以为浮点数，但是一般都使用整数。 结果“余数”的符号和左边的操作数相同。 一元运算符（++、–） 自增、自减，原操作数加一或减一。 int a = 1; // a=1 int b = a++; // 先赋值，在自增 b=a=1 a=a+1=2 int c = ++a; // 先自增，在赋值 a=a+1=3 c=a=3 int d = -7 % 3; // d=-1 int e = 7 % -3; // e=1 赋值运算符 赋值运算符就是等号。 赋值的扩展运算符如下表所示： 运算符 用法 等效 += a += b; a = a + b; -= a -= b; a = a - b; *= a *= b; a = a * b; /= a /= b; a = a / b; %= a %= b; a = a % b; int a = 1; int b = 2; a += b; // a=a+b=3 a *= b; // a=a*b=6 关系运算符 ==、!=、&amp;gt;、&amp;lt;、&amp;gt;=、&amp;lt;= 关系运算符用来进行比较运算，结果是布尔值（true/false）。 ==和!=，所有数据类型都可以使用。 &amp;gt;、&amp;lt;、&amp;gt;=、&amp;lt;=只有数值类型（byte/short/int/long/float/double，还有char）可以使用。 逻辑运算符 在Java中，逻辑运算的操作数和运算结果都是boolean类型。 名称 符号 结果 逻辑与 &amp;amp; 如果两个操作数都是true，那么结果为true，否则为false 逻辑或 | 两个操作数只要有一个是true，结果就为true，否则为false 短路与 &amp;amp;&amp;amp; 只要有一个为false，就直接返回false结束运算 短路或 || 只要有一个为true，就直接返回true结束运算 逻辑非 ! 取反 逻辑异或 ^ 相同为false，不同为true 短路的方式：从左向右计算，如果左边的操作数就已经可以确定该逻辑表达式的值，那么就不会计算右边的操作数，追求高效率。 public static void main(String[] args) { int a = 1; int b = 2; System.out.printf(&quot;a = %d, b = %d\n&quot;, a, b); boolean f = (a == b) &amp;amp;&amp;amp; (++a == b); // 因为 a == b 为 false，所以 f = false，短路后右边不计算 System.out.printf(&quot;f = %b\n&quot;, f); System.out.printf(&quot;a = %d, b = %d\n&quot;, a, b); boolean t = (++a == b) &amp;amp;&amp;amp; (a == b); // 因为 ++a 先计算，所以 a = 2 // 发生短路的时候，不会再计算右边部分，某些计算导致的值的改变就不会发生 System.out.printf(&quot;t = %b\n&quot;, t); System.out.printf(&quot;a = %d, b = %d\n&quot;, a, b); } 位运算符 位运算符 说明 ~ 取反 &amp;amp; 按位与 | 按位或 ^ 按位异或 « 左移运算符，二进制左移相当于乘2 » 右移运算符，二进制右移一位以为相当于除2取商 “&amp;amp;”和“|”既是逻辑运算符，也是位运算符。如果两侧的操作数都是boolean类型，就作为逻辑运算符使用。如果两侧的操作数都是整数类型，就作为位运算符使用。 不要把“^”当做幂运算，它是“按位异或”操作。 字符串连接符（+） “+”运算符两侧的操作数只要有一个是字符串（String）类型，系统就会自动将另一个操作数转换为字符串然后进行连接。 条件运算符 格式：T ? A : B T为boolean类型的表达式，先计算T的值。 若T为true，运算结果为表达式A的值，否则为表达式B的值。 运算符的优先级问题 优先级 运算符 类 结合性 1 () 括号运算符 由左至右 2 !、+（正）、-（负） 一元运算符 由左至右 2 ~ 位逻辑运算符 由右至左 2 ++、– 递增与递减运算符 由右至左 3 *、/、% 算术运算符 由左至右 4 +、- 算术运算符 由左至右 5 «、» 位左移、右移运算符 由左至右 6 &amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;= 关系运算符 由左至右 7 ==、!= 关系运算符 由左至右 8 &amp;amp; 位运算符、逻辑运算符 由左至右 9 ^ 位运算符、逻辑运算符 由左至右 10 | 位运算符、逻辑运算符 由左至右 11 &amp;amp;&amp;amp; 逻辑运算符 由左至右 12 || 逻辑运算符 由左至右 13 ? : 条件运算符 由右至左 14 =、+=、-=、*=、/=、%= 赋值运算符、扩展运算符 由右至左 　　我现在要举一个例子：A || B &amp;amp;&amp;amp; C，看第一眼的时候谁能很清晰地反应过来优先级？它等价于A || (B &amp;amp;&amp;amp; C)，而不是(A || B) &amp;amp;&amp;amp; C！ 　　脑容量不够用的苏轻觉得根本没必要记这么多优先级！既然小括号是最高的优先级，那写表达式的时候就全部用小括号括起来吧！ instanceof 运算符 instanceof 是二元运算符，左边是对象，右边是类。 若左边的对象是右面的类（或右边的类的子类）所创建的对象时，返回 true，否则返回 false。</summary></entry><entry><title type="html">Java 对象和类</title><link href="http://localhost:4000/2018/11/28/Java%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html" rel="alternate" type="text/html" title="Java 对象和类" /><published>2018-11-28T10:15:39+08:00</published><updated>2018-11-28T10:15:39+08:00</updated><id>http://localhost:4000/2018/11/28/Java%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB</id><content type="html" xml:base="http://localhost:4000/2018/11/28/Java%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html">&lt;ul&gt;
  &lt;li&gt;面向过程（ &lt;em&gt;Procedure Oriented&lt;/em&gt; ）
    &lt;ul&gt;
      &lt;li&gt;软件分析&lt;/li&gt;
      &lt;li&gt;软件设计&lt;/li&gt;
      &lt;li&gt;软件开发&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;面向对象（ &lt;em&gt;Object Oriented&lt;/em&gt; ）
    &lt;ul&gt;
      &lt;li&gt;面向对象分析 OOA&lt;/li&gt;
      &lt;li&gt;面向对象设计 OOD&lt;/li&gt;
      &lt;li&gt;面向对象编程 OOP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;面相对象的三大特征&quot;&gt;面相对象的三大特征&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;封装性&lt;/li&gt;
  &lt;li&gt;继承性&lt;/li&gt;
  &lt;li&gt;多态性&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;类-class&quot;&gt;类 Class&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;对象 Object/Instance(实例)
    &lt;ul&gt;
      &lt;li&gt;类可以看作是一个模板，而根据这个模板制造出来的具体实例就是对象。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 每个源文件有且只有一个public class，且类名和文件名完全相同&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 属性&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 方法&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;birthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s的出生年份为%d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 构造器&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;属性 Field
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;类的静态特征，或者说是这个类的对象所包含的数据，称为属性，也叫成员变量。&lt;/p&gt;

        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;成员变量的数据类型&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;未初始化时的默认值&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;整型&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;浮点型&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;字符型&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;‘\u0000’&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;布尔型&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;false&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;引用类型&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;null&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;方法
    &lt;ul&gt;
      &lt;li&gt;方法用于定义类或者对象的行为特征和功能实现&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;构造器（构造方法）
    &lt;ul&gt;
      &lt;li&gt;构造器用于对象的初始化，构造器的本质是一个名称与类名相同的特殊方法。&lt;/li&gt;
      &lt;li&gt;Java 通过 new 关键字来调用构造器，以返回一个类的实例。&lt;/li&gt;
      &lt;li&gt;构造器不能定义返回值类型，不能使用 return。&lt;/li&gt;
      &lt;li&gt;如果没有自定义构造器，则编译器会自动创建一个无参数类型的构造方法。如果已经有了至少一个自定义构造器，则编译器不会再创建。&lt;/li&gt;
      &lt;li&gt;构造方法也可以重载多个，重载方法的内部一般使用this表示属性。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;123456&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;654321&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;面向对象的内存分析&quot;&gt;面向对象的内存分析&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;栈（ &lt;em&gt;stack&lt;/em&gt; ）
    &lt;ul&gt;
      &lt;li&gt;每个方法被调用时都会创建一个栈帧（存储局部变量、操作数、方法出口等），属于线程私有，不会被其他线程共享。&lt;/li&gt;
      &lt;li&gt;JVM为每个线程创建一个栈，用于存放该线程执行方法的信息（实际参数、局部变量等）&lt;/li&gt;
      &lt;li&gt;栈是一个由系统自动分配的连续内存空间，有着“先进后出，后进先出”的存储特性，速度快。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;堆（ &lt;em&gt;heap&lt;/em&gt; ）
    &lt;ul&gt;
      &lt;li&gt;堆用于存放创建完毕的对象（数组也是对象）&lt;/li&gt;
      &lt;li&gt;JVM只有一个所有线程共享的堆&lt;/li&gt;
      &lt;li&gt;堆是一个不连续的内存空间，分配灵活，但是速度慢&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;方法区（ &lt;em&gt;method area&lt;/em&gt; ）
    &lt;ul&gt;
      &lt;li&gt;方法区也叫静态区，JVM只有一个所有线程共享的方法区&lt;/li&gt;
      &lt;li&gt;方法区中存放的是不变或唯一的内容（类信息、静态变量、字符串常量等）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;垃圾回收机制garbage-collection&quot;&gt;垃圾回收机制（Garbage Collection）&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;内存管理
    &lt;ul&gt;
      &lt;li&gt;对象空间的分配：使用 new 关键字创建对象&lt;/li&gt;
      &lt;li&gt;对象空间的释放：把一个对象赋值为 null&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;垃圾回收过程
    &lt;ul&gt;
      &lt;li&gt;发现无用对象（没有任何变量引用的对象）&lt;/li&gt;
      &lt;li&gt;回收无用对象所占用的内存空间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;垃圾回收算法
    &lt;ul&gt;
      &lt;li&gt;引用计数法
        &lt;ul&gt;
          &lt;li&gt;堆中的每个对象都有一个引用计数，每次引用时计数加一，每次被引用变量的值变为 null 时计数减一，直到计数为零。这种算法简单，但是无法识别循环引用的无用对象。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;引用可达法
        &lt;ul&gt;
          &lt;li&gt;从一个节点 GCROOT 出发，寻找对应的引用节点，找到节点之后继续寻找这个节点的引用节点，直到所有的引用节点寻找完毕，剩下的没有被找到的节点则全部被认为是没有被引用到的节点，即无用节点。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分代垃圾回收机制
    &lt;ul&gt;
      &lt;li&gt;JVM将堆内存划分为 Eden、Survivor、Tenured/Old 空间。&lt;/li&gt;
      &lt;li&gt;年轻代
        &lt;ul&gt;
          &lt;li&gt;所有的新生成的对象首先都是放在 Eden 区，触发过垃圾回收的对象放在 Survivor 区&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;年老代
        &lt;ul&gt;
          &lt;li&gt;在年轻代中经历了 N（默认15）次垃圾回收后仍然存活的对象，会被放到老年代中&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;持久代
        &lt;ul&gt;
          &lt;li&gt;用于存放属于静态文件的 Java 类、方法等，不影响垃圾回收&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Minor GC
        &lt;ul&gt;
          &lt;li&gt;用于清理年轻代区域。Eden 区满了就会触发一次 Minor GC 来清理无用对象，将有用的对象复制到 Survivor1 或 Survivor2 区中。&lt;/li&gt;
          &lt;li&gt;Survivor1 与 Survivor2 区域的大小相同，同一时刻只有一个在使用，另一个为空。用于存放触发小于 N（默认15） 次垃圾回收的对象。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Major GC
        &lt;ul&gt;
          &lt;li&gt;用于清理年老代区域&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Full GC
        &lt;ul&gt;
          &lt;li&gt;用于清理年轻代、年老代，Old 区满了触发。成本较高，会对系统性能产生影响。&lt;/li&gt;
          &lt;li&gt;有如下原因可能导致Full GC：
            &lt;ul&gt;
              &lt;li&gt;年老代(Tenured)被写满&lt;/li&gt;
              &lt;li&gt;持久代(Perm)被写满&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;System.gc()&lt;/code&gt;被显式调用时，程序会建议 GC 启动，但是建议并不一定执行&lt;/li&gt;
              &lt;li&gt;上一次 GC 之后 Heap 的各域分配策略动态变化&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;开发中容易造成内存泄漏的操作
    &lt;ul&gt;
      &lt;li&gt;创建大量的对象&lt;/li&gt;
      &lt;li&gt;使用静态集合类要注意这些静态变量、对象都不能被释放&lt;/li&gt;
      &lt;li&gt;各种连接对象（IO流、数据库连接、网络连接等）不使用时一定要关闭&lt;/li&gt;
      &lt;li&gt;监听器的使用，也要注意删除&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;参数传值机制&quot;&gt;参数传值机制&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;基本数据类型参
    &lt;ul&gt;
      &lt;li&gt;传递的是值的副本&lt;/li&gt;
      &lt;li&gt;副本改变不影响原件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;引用类型
    &lt;ul&gt;
      &lt;li&gt;传递的是值的副本&lt;/li&gt;
      &lt;li&gt;引用类型指的是“对象的地址”，因此副本和原参数都指向了同一个“地址”。改变副本指向地址对象的值，也意味着原参数指向对象的值也发生了改变。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>true</name></author><category term="Java" /><summary type="html">面向过程（ Procedure Oriented ） 软件分析 软件设计 软件开发 面向对象（ Object Oriented ） 面向对象分析 OOA 面向对象设计 OOD 面向对象编程 OOP 面相对象的三大特征 封装性 继承性 多态性 类 Class 对象 Object/Instance(实例) 类可以看作是一个模板，而根据这个模板制造出来的具体实例就是对象。 // 每个源文件有且只有一个public class，且类名和文件名完全相同 public class Person { // 属性 int age; String name; // 方法 void birthday() { System.out.printf(&quot;%s的出生年份为%d&quot;, this.name, 2018 - this.age); } // 构造器 Person() { } } 属性 Field 类的静态特征，或者说是这个类的对象所包含的数据，称为属性，也叫成员变量。 成员变量的数据类型 未初始化时的默认值 整型 0 浮点型 0.0 字符型 ‘\u0000’ 布尔型 false 引用类型 null 方法 方法用于定义类或者对象的行为特征和功能实现 构造器（构造方法） 构造器用于对象的初始化，构造器的本质是一个名称与类名相同的特殊方法。 Java 通过 new 关键字来调用构造器，以返回一个类的实例。 构造器不能定义返回值类型，不能使用 return。 如果没有自定义构造器，则编译器会自动创建一个无参数类型的构造方法。如果已经有了至少一个自定义构造器，则编译器不会再创建。 构造方法也可以重载多个，重载方法的内部一般使用this表示属性。 public class UserInfo { int userID; String name; String password; public UserInfo() { super(); } public UserInfo(int id, String name, String password) { super(); this.userID = id; this.name = name; this.password = password; } public UserInfo(String name, String password) { super(); this.name = name; this.password = password; } public static void main(String[] args) { UserInfo user1 = new UserInfo(); UserInfo user2 = new UserInfo(0, &quot;name&quot;, &quot;123456&quot;); UserInfo user3 = new UserInfo(&quot;name2&quot;, &quot;654321&quot;); System.out.println(user1); System.out.println(user2); System.out.println(user3); } } 面向对象的内存分析 栈（ stack ） 每个方法被调用时都会创建一个栈帧（存储局部变量、操作数、方法出口等），属于线程私有，不会被其他线程共享。 JVM为每个线程创建一个栈，用于存放该线程执行方法的信息（实际参数、局部变量等） 栈是一个由系统自动分配的连续内存空间，有着“先进后出，后进先出”的存储特性，速度快。 堆（ heap ） 堆用于存放创建完毕的对象（数组也是对象） JVM只有一个所有线程共享的堆 堆是一个不连续的内存空间，分配灵活，但是速度慢 方法区（ method area ） 方法区也叫静态区，JVM只有一个所有线程共享的方法区 方法区中存放的是不变或唯一的内容（类信息、静态变量、字符串常量等） 垃圾回收机制（Garbage Collection） 内存管理 对象空间的分配：使用 new 关键字创建对象 对象空间的释放：把一个对象赋值为 null 垃圾回收过程 发现无用对象（没有任何变量引用的对象） 回收无用对象所占用的内存空间 垃圾回收算法 引用计数法 堆中的每个对象都有一个引用计数，每次引用时计数加一，每次被引用变量的值变为 null 时计数减一，直到计数为零。这种算法简单，但是无法识别循环引用的无用对象。 引用可达法 从一个节点 GCROOT 出发，寻找对应的引用节点，找到节点之后继续寻找这个节点的引用节点，直到所有的引用节点寻找完毕，剩下的没有被找到的节点则全部被认为是没有被引用到的节点，即无用节点。 分代垃圾回收机制 JVM将堆内存划分为 Eden、Survivor、Tenured/Old 空间。 年轻代 所有的新生成的对象首先都是放在 Eden 区，触发过垃圾回收的对象放在 Survivor 区 年老代 在年轻代中经历了 N（默认15）次垃圾回收后仍然存活的对象，会被放到老年代中 持久代 用于存放属于静态文件的 Java 类、方法等，不影响垃圾回收 Minor GC 用于清理年轻代区域。Eden 区满了就会触发一次 Minor GC 来清理无用对象，将有用的对象复制到 Survivor1 或 Survivor2 区中。 Survivor1 与 Survivor2 区域的大小相同，同一时刻只有一个在使用，另一个为空。用于存放触发小于 N（默认15） 次垃圾回收的对象。 Major GC 用于清理年老代区域 Full GC 用于清理年轻代、年老代，Old 区满了触发。成本较高，会对系统性能产生影响。 有如下原因可能导致Full GC： 年老代(Tenured)被写满 持久代(Perm)被写满 System.gc()被显式调用时，程序会建议 GC 启动，但是建议并不一定执行 上一次 GC 之后 Heap 的各域分配策略动态变化 开发中容易造成内存泄漏的操作 创建大量的对象 使用静态集合类要注意这些静态变量、对象都不能被释放 各种连接对象（IO流、数据库连接、网络连接等）不使用时一定要关闭 监听器的使用，也要注意删除 参数传值机制 基本数据类型参 传递的是值的副本 副本改变不影响原件 引用类型 传递的是值的副本 引用类型指的是“对象的地址”，因此副本和原参数都指向了同一个“地址”。改变副本指向地址对象的值，也意味着原参数指向对象的值也发生了改变。</summary></entry></feed>